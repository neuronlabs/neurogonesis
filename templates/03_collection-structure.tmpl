{{define "collection-structure" -}}

// {{.Collection.VariableName}} is the collection used to query {{.Model.Name}} model.
var {{.Collection.VariableName}} = &{{.Collection.Name}}{}

type {{.Collection.Name}} struct {
    Model *mapping.ModelStruct
}

// InitializeCollection implements db.Collection interface.
func ({{.Collection.Receiver}} *{{.Collection.Name}}) InitializeCollection(c *controller.Controller) error {
    mStruct, err := c.ModelStruct(&{{.Model.Name}}{})
    if err != nil {
        return err
    }
    {{ .Collection.VariableName }} = &{{.Collection.Name}}{Model: mStruct}
    return nil
}

// Query creates the query for the {{.Model.Name}}.
func ({{.Collection.Receiver}} *{{.Collection.Name}}) Query(db db.DB, models ...*{{.Model.Name}}) *{{.Collection.QueryBuilder}} {
    var queryModels []mapping.Model
    if len(models) > 0 {
        queryModels = make([]mapping.Model, len(models))
        for i, model := range models {
            queryModels[i] = model
        }
    }
    builder := db.Query({{.Collection.Receiver}}.Model, queryModels ...)
    return &{{.Collection.QueryBuilder}}{builder: builder}
}

// QueryCtx creates the query for the {{.Model.Name}} with provided 'ctx' context.
func ({{.Collection.Receiver}} *{{.Collection.Name}}) QueryCtx(ctx context.Context, db db.DB, models ...*{{.Model.Name}}) *{{.Collection.QueryBuilder}} {
    var queryModels []mapping.Model
    if len(models) > 0 {
        queryModels = make([]mapping.Model, len(models))
        for i, model := range models {
            queryModels[i] = model
        }
    }
    builder := db.QueryCtx(ctx, {{.Collection.Receiver}}.Model, queryModels ...)
    return &{{.Collection.QueryBuilder}}{builder: builder}
}
{{- end}}